<?php
if (!defined('ABSPATH')) exit;

/**
 * Column Inspector for Centris Sync
 * Allows user to pick source location and file, then shows first row with indices
 */
class CHS_ColumnInspector {

    protected $baseDir;

    public function __construct() {
        $this->baseDir = WP_CONTENT_DIR . '/uploads/centris-sync/';
        add_action('admin_menu', [$this, 'registerAdminPage']);
    }

    /**
     * Register menu page under Centris Sync
     */
    public function registerAdminPage() {
        add_submenu_page(
            'centris-sync', 
            __('Column Inspector', 'chs'),
            __('Column Inspector', 'chs'),
            'manage_options',
            'chs-column-inspector',
            [$this, 'renderInspectorPage']
        );
    }

    /**
     * Render the Inspector UI
     */
    public function renderInspectorPage() {
        $selectedLocation = isset($_POST['chs_location']) ? sanitize_text_field($_POST['chs_location']) : '';
        $selectedFile = isset($_POST['chs_file']) ? sanitize_text_field($_POST['chs_file']) : '';

        echo '<div class="wrap"><h1>Column Inspector</h1>';
        echo '<form method="POST">';
        
        // Step 1: Location selector
        echo '<h3>Select Location</h3>';
        echo '<select name="chs_location">';
        echo '<option value="">-- Choose --</option>';
        echo '<option value="static" '.selected($selectedLocation, 'static', false).'>Static Dir</option>';
        echo '<option value="auto" '.selected($selectedLocation, 'auto', false).'>Automatic Select 1</option>';
        echo '<option value="files" '.selected($selectedLocation, 'files', false).'>Files</option>';
        echo '</select>';

        // Step 2: If location chosen, list files
        if ($selectedLocation) {
            $files = $this->getFilesFromLocation($selectedLocation);
            if (!empty($files)) {
                echo '<h3>Select File</h3>';
                echo '<select name="chs_file">';
                echo '<option value="">-- Choose File --</option>';
                foreach ($files as $file) {
                    echo '<option value="'.esc_attr($file).'" '.selected($selectedFile, $file, false).'>'.esc_html(basename($file)).'</option>';
                }
                echo '</select>';
            } else {
                echo '<p><em>No files found in this location.</em></p>';
            }
        }

        submit_button('Inspect');
        echo '</form>';

        // Step 3: If file chosen, show inspector output
        if ($selectedFile) {
            $this->renderInspectorOutput($selectedFile);
        }

        echo '</div>';
    }

    /**
     * Get available files based on location choice
     */
    protected function getFilesFromLocation($location) {
        $dir = $this->baseDir;

        switch ($location) {
            case 'static':
                $dir .= 'static/';
                break;
            case 'auto':
                // Autogenerated unique key dir â€“ for now, take the latest folder
                $subDirs = glob($dir . '*', GLOB_ONLYDIR);
                rsort($subDirs); // newest first
                $dir = $subDirs[0] ?? $dir;
                break;
            case 'files':
                $dir .= 'files/';
                break;
        }

        if (!is_dir($dir)) {
            return [];
        }

        return glob($dir . '*.txt');
    }

    /**
     * Show [index] => value pairs for first row of file
     */
    protected function renderInspectorOutput($filePath) {
        echo '<h3>Inspector Output</h3><pre>';

        if (!file_exists($filePath)) {
            echo "File not found: " . esc_html($filePath);
            echo '</pre>';
            return;
        }

        $handle = fopen($filePath, 'r');
        if ($handle) {
            // skip headers if any, take first non-empty row
            while (($line = fgets($handle)) !== false) {
                $line = trim($line);
                if ($line !== '') {
                    $columns = explode('|', $line); // Centris is pipe-separated
                    foreach ($columns as $index => $value) {
                        echo "[" . ($index+1) . "] => " . $value . "\n";
                    }
                    break;
                }
            }
            fclose($handle);
        } else {
            echo "Unable to open file.";
        }

        echo '</pre>';
    }
}
